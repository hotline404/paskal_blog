'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./index.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * 单击复制文本到剪切板
 * @text {String} 需要复制的文本内容
 * @children {Node} 渲染的Dom元素
 */
var copyClipboard = function (_React$Component) {
  _inherits(copyClipboard, _React$Component);

  function copyClipboard(props) {
    _classCallCheck(this, copyClipboard);

    var _this = _possibleConstructorReturn(this, (copyClipboard.__proto__ || Object.getPrototypeOf(copyClipboard)).call(this, props));

    _this.componentDidMount = function () {
      var child = _this.ref.current.children[0];
      _this.setState({
        offsetLeft: '' + (child.offsetWidth + 4),
        offsetTop: '' + (child.offsetHeight / 2 - 29 / 2)
      });
    };

    _this.showToolTip = function (node, id, text, suffix) {
      var _this$state = _this.state,
          offsetLeft = _this$state.offsetLeft,
          offsetTop = _this$state.offsetTop;

      var el = document.createElement('div');
      el.setAttribute('id', id);
      el.setAttribute('style', 'left: ' + offsetLeft + 'px;top:' + offsetTop + 'px;');
      el.innerHTML = '<span>' + text + ' <span style=\'color:darkgrey;font-size:12px\'>' + suffix + '</span></span>';
      el.addEventListener('click', function () {
        _this.copyText(text);
      });
      node.target.appendChild(el);
    };

    _this.removeToolTip = function (node, id) {
      var el = document.getElementById(id);
      node.target.removeChild(el);
    };

    _this.copyText = function (text) {
      var el = document.createElement('input');
      el.setAttribute('type', 'text');
      el.setAttribute('style', 'position:absolute;left:-9999px;');
      el.setAttribute('value', text);
      document.body.appendChild(el);
      el.select();
      var boolean = document.execCommand('copy');
      console.log(text);
      document.body.removeChild(el);
      return boolean ? '√' : 'x';
    };

    _this.state = {
      offsetLeft: 0,
      offsetTop: 0
    };
    _this.ref = _react2.default.createRef();
    return _this;
  }

  // 初始化获取子组件宽高计算浮动位置


  /**
   * 显示悬浮提示框
   * @node {Object} Node节点
   * @id {String} id
   * @text {String} 显示文本内容
   * @suffix {String} 文本后缀 default:'单击复制'
   */


  /**
  * 移除悬浮提示框
  * @node {Object} Node节点
  * @id {String} id
  */


  /**
  * 复制文本
  * @text {String} 文字
  */


  _createClass(copyClipboard, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          _props$text = _props.text,
          text = _props$text === undefined ? '' : _props$text,
          _props$suffix = _props.suffix,
          suffix = _props$suffix === undefined ? '' : _props$suffix,
          _props$children = _props.children,
          children = _props$children === undefined ? _react2.default.createElement('span', null) : _props$children;

      return _react2.default.createElement(
        'span',
        {
          ref: this.ref,
          className: 'copy-tooltip',
          onClick: function onClick(e) {
            var textTemp = _this2.copyText(text);
            _this2.removeToolTip(e, 'props-tooltip');
            _this2.showToolTip(e, 'props-tooltip', textTemp, suffix);
          },
          onMouseEnter: function onMouseEnter(e) {
            _this2.showToolTip(e, 'props-tooltip', text, suffix);
          },
          onMouseLeave: function onMouseLeave(e) {
            _this2.removeToolTip(e, 'props-tooltip');
          }
        },
        children
      );
    }
  }]);

  return copyClipboard;
}(_react2.default.Component);

exports.default = copyClipboard;